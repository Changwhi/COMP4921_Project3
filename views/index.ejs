<!DOCTYPE html>
<html>
<%- include("templates/header") %>

  <body>
    <section class="section has-background-light">
      <div class="maincolumns columns is-desktop">
        <div class="column is-10 is-offset-1 has-background-white" style="border-radius: 25px;">

          <nav class="breadcrumb" aria-label="breadcrumbs">
            <ul>
              <li><a href="/">Personal Calendar</a></li>
              <li class="is-active"><a href="#" aria-current="page">Your Personal Calendar</a></li>
            </ul>
          </nav>
          <div class="tabs is-centered">
            <ul>
              <li class="is-active" onclick="displayComponent({'number': 0, 'name': '.today'})">
                <a>
                  <span class="icon is-small"><i class="fas fa-image" aria-hidden="true"></i></span>
                  <span>Today</span>
                </a>
              </li>
              <li onclick="displayComponent({'number': 1, 'name': '.upcoming'})">
                <a>
                  <span class="icon is-small"><i class="fas fa-music" aria-hidden="true"></i></span>
                  <span>Upcoming</span>
                </a>
              </li>
              <li onclick="displayComponent({'number': 2, 'name': '.week'})">
                <a>
                  <span class="icon is-small"><i class="fas fa-image" aria-hidden="true"></i></span>
                  <span>Week</span>
                </a>
              </li>
              <li onclick="displayComponent({'number': 3, 'name': '.month'})">
                <a>
                  <span class="icon is-small"><i class="fas fa-image" aria-hidden="true"></i></span>
                  <span>Month</span>
                </a>
              </li>
              <li>
                <a class="button is-small is-primary js-modal-trigger" data-target="modal-js-example"
                  onclick="individualDateSelect()">
                  <span class="icon is-large"><i class="fas fa-address-book" aria-hidden="true"></i></span>
                  <span>Add Event</span>
                </a>
              </li>

            </ul>
          </div>
          <!-- Tabs -->

          <div class='today'>
            <div class='column has-text-centered'>
              <%- include("components/today.ejs") %>
            </div>
            <div class='columns'>
            </div>
          </div>

          <div class='upcoming' style='display: none'>
            <div class='column has-text-centered'>
              <%- include("components/upcoming.ejs") %>
            </div>
            <div class='columns'>
            </div>
          </div>
          <div class='week' style='display: none'>
            <div class='column has-text-centered'>
              <%- include("components/week.ejs") %>
            </div>
            <div class='columns'>
            </div>
          </div>


          <div class='month' style='display: none'>
            <div class='column has-text-centered'>
              <h1 class="title" id="month-title"></h1>
              <%- include("components/month.ejs") %>
            </div>
            <div class='columns'>
            </div>
          </div>


        </div>






      </div>
      <div id="modal-js-date-select" class="modal">
        <div class="modal-background"></div>
        <div class="columns">
          <div class="modal-content is-centered">
            <div class="box" style="height: auto">
              <div id="error"></div>
              <p>Add an event!</p>
              <div class="column">
                <label>Event Name</label>
                <input type="text" id="event-name" placeholder="Event Name">
              </div>
              <div class="column">
                <label>Start Date:</label>
                <input id="start-datepicker" />
              </div>
              <div class="column">
                <label>End Date:</label>
                <input id="end-datepicker" />
              </div>


              <button id="add-friends-btn" class="button is-primary">
                <span class="icon">
                  <i class="fas fa-plus"></i>
                </span>
                <span>Add Friends</span>
              </button>

              <div id="added-friends-container" class="column">
                <label>Added Friends:</label>
                <div id="added-friends-list" class="tags">
                  <!-- Selected friends will be listed here as tags -->
                </div>
              </div>


              <div class="column" style="margin-top: 300px;">
                <button id="submit-event" type="submit" class="button is-primary">Create
                  event</button>
                <button id="cancel-form" type="cancel" class="button is-primary">Cancel</button>
              </div>

            </div>
          </div>
        </div>
        <button class="modal-close is-large" aria-label="close"></button>
      </div>

      <!-- //modal for friends list -->
      <div id="friends-list-modal" class="modal">
        <div class="modal-background"></div>
        <div class="modal-card">
          <header class="modal-card-head">
            <p class="modal-card-title">Select Friends</p>
            <button class="delete" aria-label="close" onclick="closeFriendsListModal()"></button>
          </header>
          <section class="modal-card-body">
            <!-- Friends list -->
            <div class="list is-hoverable">
              <%if(locals.friends) {%>

                <% let i=0; %>
                  <% for (i; i < friends.length; i++) { %>
                    <div class="list-item">
                      <input type="checkbox" id=<%=friends[i].friend_id%> name="friends" value=<%=friends[i].name%>>
                        <label for="friend1">
                          <%= friends[i].name%>
                        </label>
                    </div>

                    <%}%>

                      <% }%>
            </div>
          </section>
          <footer class="modal-card-foot">
            <button class="button is-success" onclick="addSelectedFriends()">Add</button>
            <button class="button" onclick="closeFriendsListModal()">Cancel</button>
          </footer>
        </div>
      </div>

    </section>

    <script>
      let startDate = undefined;
      let endDate = undefined;
      let randomSelectedColor;
      const cancelFormBtn = document.getElementById('cancel-form')
      const submitEventBtn = document.getElementById('submit-event')
      let storedEvents = [];
      let selectedFriends = [];

      document.getElementById('add-friends-btn').addEventListener('click', function () {
        document.getElementById('friends-list-modal').classList.add('is-active');
      });

      function closeFriendsListModal() {
        document.getElementById('friends-list-modal').classList.remove('is-active');
      }

      function addSelectedFriends() {
        let addedFriendsList = document.getElementById('added-friends-list');
        addedFriendsList.innerHTML = ''; // Clear the list before adding new tags

        let checkboxes = document.querySelectorAll('#friends-list-modal input[type="checkbox"]:checked');
        for (let checkbox of checkboxes) {
          selectedFriends.push(checkbox.id); // Assuming value is a friend ID
          console.log("check id" + checkbox.id)

          // Create tag element for each friend and append to the list
          let friendTag = document.createElement('span');
          friendTag.className = 'tag is-primary';
          friendTag.textContent = checkbox.value; // Assuming the next sibling is the label with the friend's name
          addedFriendsList.appendChild(friendTag);
        }

        // Assuming you have access to newEvent here, if not, store selectedFriends in a higher scope variable

        closeFriendsListModal();
      }

      function displayComponent(params) {
        console.log(params.number)
        console.log(params.name)
        const components = [".today", ".upcoming", ".week", ".month"]
        for (let i = 0; i < components.length; i++) {
          document.querySelectorAll('li')[i].classList.remove('is-active');
          document.querySelector(components[i]).style.display = 'none'
        }
        document.querySelectorAll('li')[params.number].classList.add('is-active');
        document.querySelector(params.name).style.display = "block";

        if (params.name === ".today") {
          dayCalendar.render();
          return;
        }
        if (params.name === ".upcoming") {
          upcomingCalendar.render();
          return;
        }
        if (params.name === ".week") {
          weekCalendar.render();
          return;
        }
        if (params.name === ".month") {
          calendar.render();
          return;
        }
      }

      const individualDateSelect = () => {
        dateClickFlag = true;
        document.getElementById('modal-js-date-select').classList.add('is-active');
        const firstDateSelectPicker = new easepick.create({
          lang: 'en-US',
          element: "#start-datepicker",
          buttons: {
            showPreviousMonth: true,
            showNextMonth: true,
          },
          css: [
            "https://cdn.jsdelivr.net/npm/@easepick/bundle@1.2.1/dist/index.css",
            'https://cdn.jsdelivr.net/npm/@easepick/time-plugin@1.2.1/dist/index.css',
          ],
          locale: {
            cancel: 'Cancel',
            apply: 'Apply',
          },
          plugins: [
            'TimePlugin',
          ],
          TimePlugin: {
            format: 'HH:mm',
          }
        })
        firstDateSelectPicker.on('select', (e) => {
          return startDate = moment(firstDateSelectPicker.getDate()).format('YYYY-MM-DD HH:mm')
        });
        const endDateSelectPicker = new easepick.create({
          lang: 'en-US',
          element: "#end-datepicker",
          buttons: {
            showPreviousMonth: true,
            showNextMonth: true,
          },
          css: [
            "https://cdn.jsdelivr.net/npm/@easepick/bundle@1.2.1/dist/index.css",
            'https://cdn.jsdelivr.net/npm/@easepick/time-plugin@1.2.1/dist/index.css',
          ],
          locale: {
            cancel: 'Cancel',
            apply: 'Apply',
          },
          plugins: [
            'TimePlugin',
          ],
          TimePlugin: {
            format: 'HH:mm',
          }
        })
        endDateSelectPicker.on('select', (e) => {
          return endDate = moment(endDateSelectPicker.getDate()).format('YYYY-MM-DD HH:mm')
        });
      }

      (document.querySelectorAll('.modal-background, .modal-close, .modal-card-head .delete, .modal-card-foot .button') || []).forEach(($close) => {
        const $target = $close.closest('.modal');

        $close.addEventListener('click', () => {
          $target.classList.remove('is-active');
        });
      });

      document.addEventListener('keydown', (event) => {
        if (event.code === 'Escape') {
          (document.querySelectorAll('.modal') || []).forEach(($modal) => {
            $modal.classList.remove('is-active');
          });
        }
      });



      function getRandomColor() {
        let red = Math.floor(Math.random() * 256);
        let green = Math.floor(Math.random() * 256);
        let blue = Math.floor(Math.random() * 256);
        let randomColor = 'rgb(' + red + ',' + green + ',' + blue + ')';
        return randomColor;
      }

      document.addEventListener('DOMContentLoaded', function () {

        cancelFormBtn.addEventListener('click', () => {
          (document.querySelectorAll('.modal') || []).forEach(($modal) => {
            $modal.classList.remove('is-active');

          });

        })


        submitEventBtn.addEventListener('click', async () => {
          //for <frined></frined>

          let eventName = document.getElementById('event-name')
          submitEventBtn.disabled = true;
          randomSelectedColor = getRandomColor();
          if (arrayData.length >= 1) {
            randomSelectedColor = arrayData[0].color;
          }
          try {
            if (eventName.value !== null) {
              let newEvent = {
                title: eventName.value,
                start: startDate,
                end: endDate,
                color: randomSelectedColor,
                backgroundColor: getRandomColor(),
                users: selectedFriends,
              };
              storedEvents.push(newEvent);
              upcomingCalendar.addEvent(newEvent);
              weekCalendar.addEvent(newEvent);
              calendar.addEvent(newEvent);
              dayCalendar.addEvent(newEvent);
              await fetch('/submitEvent', {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                },
                body: JSON.stringify(storedEvents),
              });
            } else {
              errorDisplay();
              return;
            }

            (document.querySelectorAll('.modal') || []).forEach(($modal) => {
              $modal.classList.remove('is-active');

            });

          } catch (error) {
            console.log(error);
          } finally {
            submitEventBtn.disabled = false;
          }
        });




      })
    </script>
  </body>

</html>