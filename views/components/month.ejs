<!DOCTYPE html>
<html>

<head>
    <script src='https://cdn.jsdelivr.net/npm/fullcalendar@6.1.9/index.global.min.js'></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.1/moment.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/pikaday/pikaday.js"></script>
</head>

<body>
    <section class="section has-background-light">
        <div class="maincolumns columns is-desktop">
            <div class="column is-10 is-offset-1 has-background-white" style="border-radius: 25px;">
                <div class="card">
                    <div class="card-content" style="max-width: 1100px;">
                        <div id="error"></div>
                        <div id='calendar'
                            style="width: 100%; max-width: 1100px; max-height: 1100px; margin:10px auto;"></div>
                    </div>
                </div>
            </div>
        </div>
    </section>
    <script>
        const calendarEl = document.getElementById('calendar');
        const errorMessage = document.getElementById('error');
        const arrayData = JSON.parse('<%- JSON.stringify(locals.calendar_data) %>');
        let storedEvents = [];


        function getRandomColor() {
            let red = Math.floor(Math.random() * 256);
            let green = Math.floor(Math.random() * 256);
            let blue = Math.floor(Math.random() * 256);

            let randomColor = 'rgb(' + red + ',' + green + ',' + blue + ')';

            return randomColor;
        }

        const errorDisplay = () => {
            errorMessage.innerHTML += "<h3>No empty values!</h3>"
            setTimeout(() => {
                errorMessage.innerHTML = ""
            }, 5000)
        }

        const rangeSelect = (info, calendar) => {
            let startRange = info.startStr;
            let endRange = info.endStr;
            console.log(info.startStr + 'to' + info.endStr)
            let eventName = prompt(`Date selected: ${info.startStr} to ${info.endStr}` + '\nEnter event name:');
            if (eventName !== null) { // bulma pop up + date, hour, minute selectors
                let startDate = moment(info.startStr).set({ hour: 11, minute: moment().minute(), second: moment().second() }).format('YYYY-MM-DD HH:mm');
                let endDate = moment(info.endStr).set({ hour: moment().hour(), minute: moment().minute(), second: moment().second() }).subtract(24, 'hour').format('YYYY-MM-DD HH:mm')

                let newEvent = {
                    title: eventName,
                    start: startDate,
                    end: endDate,
                };
                calendar.addEvent(newEvent);
                storedEvents.push(newEvent);
            } else {
                errorDisplay();
                return;
            }
            fetch('/submitEvent', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(storedEvents)
            });
        }

        const individualDateSelect = (info, calendar) => {
            let eventName = prompt(`Date selected: ${info.dateStr}` + '\nEnter event name:');
            if (eventName !== null) {
                let startDate = moment(info.dateStr).set({ hour: moment().hour(), minute: moment().minute(), second: moment().second() }).format('YYYY-MM-DD HH:mm');
                let endDate = moment(info.dateStr).set({ hour: moment().hour(), minute: moment().minute(), second: moment().second() }).add(2, 'hour').format('YYYY-MM-DD HH:mm')

                let newEvent = {
                    title: eventName,
                    start: startDate,
                    end: endDate,
                };
                calendar.addEvent(newEvent);
                storedEvents.push(newEvent);
            } else {
                errorDisplay();
                return;
            }
            fetch('/submitEvent', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(storedEvents)
            });
        }

        document.addEventListener('DOMContentLoaded', function () {
            let dateClickFlag = false;

            setTimeout(function () {
                let calendar = new FullCalendar.Calendar(calendarEl, {
                    timeZone: 'UTC',
                    initialView: 'dayGridMonth',
                    events: arrayData,
                    editable: true,
                    selectable: true,
                    eventColor: getRandomColor(),
                    dateClick: (info) => {
                        individualDateSelect(info, calendar)
                        dateClickFlag = true;
                    },
                    select: (info) => {
                        setTimeout(() => {
                            if (!dateClickFlag) {
                                rangeSelect(info, calendar)
                            }
                            dateClickFlag = false;
                        }, 0);
                    }
                });
                calendar.render();
            }, 3000)
        });
    </script>
</body>

</html>